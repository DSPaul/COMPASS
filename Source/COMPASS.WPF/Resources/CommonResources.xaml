<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters ="clr-namespace:COMPASS.Converters"
                    xmlns:models ="clr-namespace:COMPASS.Models"
                    xmlns:tools="clr-namespace:COMPASS.Tools"
                    xmlns:multiSelectCombobox="clr-namespace:COMPASS.Resources.Controls.MultiSelectCombobox">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Themes/DarkTheme.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--TextBox Style with placeholder Text-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                            MinWidth="{TemplateBinding MinWidth}">
                        <Grid>
                            <TextBlock Text="{TemplateBinding tools:AP.PlaceHolderText}" 
                                       VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                       Foreground="{StaticResource TextMutedColor}" 
                                       Margin="{Binding Path=Margin, ElementName=PART_ContentHost}"
                                       Padding="{Binding Path=Padding, ElementName=PART_ContentHost}"
                                       FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}"
                                       Visibility="{TemplateBinding Text, Converter={StaticResource ToVisibilityConverter}, ConverterParameter=True}"/>
                            <ScrollViewer Name="PART_ContentHost" Style="{x:Null}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextColor}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="Background" Value="{StaticResource DarkUIElementBackground}"/>
    </Style>

    <!--#region Button Styles and Templates-->
    <!--Button base-->
    <Style TargetType="{x:Type Button}" x:Key="BaseButton">
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Margin" Value="10,3"/>
        <Setter Property="Padding" Value="15,5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Button With Icon and text-->
    <Style TargetType="{x:Type Button}" x:Key="IconTextButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="7" HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}">
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" SharedSizeGroup="ButtonIcon"/>
                                <ColumnDefinition Width="*" SharedSizeGroup="ButtonText"/>
                            </Grid.ColumnDefinitions>
                            <materialDesign:PackIcon Margin="0,0,10,0"
                                            Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tools:AP.IconKind)}"/>
                            <ContentPresenter Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Button Text Only-->
    <Style TargetType="{x:Type Button}" x:Key="TextButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="7" HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="IconBtn" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <materialDesign:PackIcon Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Style="{StaticResource ClickableIcon}"
                            Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tools:AP.IconKind)}" 
                            Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"
                            Visibility="{TemplateBinding Visibility}">
                        </materialDesign:PackIcon>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ContentButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ScrollBar Style-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent">
                        <materialDesign:PackIcon Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tools:AP.IconKind)}" Foreground="{StaticResource ScrollBar}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="OverridesDefaultStyle" Value="true"/>-->
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Width="8"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="HorizontalScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Height="8"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="15"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="15"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
            <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineUpCommand" tools:AP.IconKind="MenuUp"/>
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource VerticalScrollBarThumb}" Margin="1,0,1,0" 
                           Background="{StaticResource ScrollBar}" BorderBrush="{StaticResource ScrollBar}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineDownCommand" tools:AP.IconKind="MenuDown"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="15"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="15"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" CornerRadius="2" Background="Transparent"/>
            <RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineLeftCommand" tools:AP.IconKind="MenuLeft"/>
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource HorizontalScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource ScrollBar}" BorderBrush="{StaticResource ScrollBar}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineRightCommand" tools:AP.IconKind="MenuRight"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="auto" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="auto"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Style.Triggers>
            <Trigger Property="ComputedVerticalScrollBarVisibility" Value="Collapsed">
                <!--<Setter Property="Background" Value="Purple"/>-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region Slider-->
    <Style x:Key="SliderRepeatButtonL" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border BorderThickness="0" Background="White" Height="3" CornerRadius="1,0,0,1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderRepeatButtonR" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border BorderThickness="0" Background="White" Height="3" CornerRadius="0,1,1,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumb" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border CornerRadius="50" Height="15" Width="15" Background="{StaticResource AccentColor}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Slider"  TargetType="Slider">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Track Grid.Row="1" x:Name="PART_Track"   >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButtonL}"  Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumb}"  />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButtonR}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>
    <Style TargetType="Slider">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource Slider}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <Style TargetType="Separator" x:Key="MarginlessSeparator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Margin="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region Contextmenu-->
    <Style TargetType="ContextMenu">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border CornerRadius="5" Background="#FF3C3C3C" BorderThickness="0">
                        <Border.OpacityMask>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Border Background="Black" SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.OpacityMask>
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Grid.IsSharedSizeScope="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="MenuItem">
        <Setter Property="tools:AP.IconKind" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Padding="15,5" Background="{TemplateBinding Background}">
                        <Grid Background="{x:Null}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" SharedSizeGroup="Icon"/>
                                <ColumnDefinition Width="*" SharedSizeGroup="HeaderHost"/>
                                <ColumnDefinition Width="auto" SharedSizeGroup="Shortcut"/>
                            </Grid.ColumnDefinitions>
                            <materialDesign:PackIcon Kind="{TemplateBinding tools:AP.IconKind}" 
                                                     Foreground="{TemplateBinding Foreground}" Margin="0,3,10,3"/>
                            <CheckBox Grid.Column="0" IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" 
                                      Visibility="{TemplateBinding IsCheckable, Converter={StaticResource ToVisibilityConverter}}"/>
                            <ContentPresenter x:Name="HeaderHost" Content="{TemplateBinding Header}" Grid.Column="1"/>
                            <TextBlock x:Name="Shortcut" Text="{TemplateBinding InputGestureText}" Margin="5,0"
                                       Foreground="{StaticResource TextMutedColor}" Grid.Column="2"/>
                            <!--Little submenu arrow-->
                            <Polygon Points="0,0 6,6, 0,12" Stroke="{x:Null}" Fill="{StaticResource TextMutedColor}" HorizontalAlignment="Right"
                                    Grid.Column="2" Margin="5" VerticalAlignment="Center">
                                <Polygon.Style>
                                    <Style TargetType="{x:Type Polygon}">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="true">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Polygon.Style>
                            </Polygon>
                            <!--Submenu-->
                            <Popup Grid.Column="0" Name="Popup" Placement="Right" HorizontalOffset="15" VerticalOffset="-20" AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}" PopupAnimation="Fade">
                                <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="#FF3C3C3C"
                                        CornerRadius="5">
                                    <Border.OpacityMask>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Border Background="Black" SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"/>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.OpacityMask>
                                    <ItemsPresenter/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background"  Value="#FF6C6C6C"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource TextMutedColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters:MultiParamConverter x:Key="MultiParamConverter"/>

    <ContextMenu x:Key="CodexContextMenu" x:Shared="False">
        <MenuItem Header="Open Locally" tools:AP.IconKind="FileOutline"
                  Command="{Binding Path=DataContext.CodexVM.OpenCodexLocallyCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <MenuItem Header="Open Online" tools:AP.IconKind="Web"
                  Command="{Binding Path=DataContext.CodexVM.OpenCodexOnlineCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <Separator Style="{StaticResource MarginlessSeparator}"/>
        <MenuItem Header="Edit..." tools:AP.IconKind="Edit" InputGestureText="Ctrl + E"
                  Command="{Binding Path=DataContext.CodexVM.EditCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <MenuItem tools:AP.IconKind="Favorite" InputGestureText="Ctrl + F"
                  Command="{Binding Path=DataContext.CodexVM.FavoriteCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}">
            <MenuItem.Style>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Header" Value="Favorite"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext.Favorite}" Value="True">
                            <Setter Property="Header" Value="Unfavorite"/>
                            <Setter Property="Foreground" Value="IndianRed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem tools:AP.IconKind="BookInformationVariant" InputGestureText="Ctrl + I"
                  Command="{Binding DataContext.MVM.CodexInfoVM.ToggleCodexInfoCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
            <MenuItem.Style>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Header" Value="Show Info"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DataContext.MVM.CodexInfoVM.ShowCodexInfo,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                            <Setter Property="Header" Value="Hide Info"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <Separator Style="{StaticResource MarginlessSeparator}"/>
        <MenuItem Header="Renew MetaData" tools:AP.IconKind="FileRefreshOutline"
                  Command="{Binding Path=DataContext.CodexVM.GetMetaDataCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <MenuItem Header="Renew Cover" tools:AP.IconKind="ImageRefreshOutline"
                  Command="{Binding Path=DataContext.CodexVM.GetCoverCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <Separator Style="{StaticResource MarginlessSeparator}"/>
        <MenuItem Header="Show in Explorer" tools:AP.IconKind="FolderEyeOutline"
                  Command="{Binding Path=DataContext.CodexVM.ShowInExplorerCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <MenuItem Header="Move to Collection" tools:AP.IconKind="FolderMoveOutline"
                  ItemsSource="{Binding DataContext.MVM.CollectionVM.CollectionDirectories, 
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
            <MenuItem.ItemContainerStyle>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="MenuItem.Command" Value="{Binding Path=DataContext.CodexVM.MoveToCollectionCommand,
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
                    <Setter Property="DataContext" Value="{Binding DataContext}"/>
                    <Setter Property="MenuItem.CommandParameter">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource MultiParamConverter}">
                                <Binding Path="Header" RelativeSource="{RelativeSource self}"/>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=MenuItem, AncestorLevel=1}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </MenuItem.ItemContainerStyle>
        </MenuItem>
        <MenuItem Header="Remove" tools:AP.IconKind="Delete" InputGestureText="Delete"
                  ToolTip="Removes the item from COMPASS"
                  Command="{Binding Path=DataContext.CodexVM.DeleteCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
        <MenuItem Header="Remove Forever" tools:AP.IconKind="DeleteForever" InputGestureText="Alt+Delete"
                  Command="{Binding Path=DataContext.CodexVM.BanishCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"
                  ToolTip="Removes the item from COMPASS and excludes it from future imports."/>
    </ContextMenu>

    <ContextMenu x:Key="MultiCodexContextMenu" x:Shared="False"
                    DataContext="{Binding SelectedItems, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Selector}}}">
        <MenuItem Header="Open Selection" tools:AP.IconKind="FileMultipleOutline" CommandParameter="{Binding}" InputGestureText="Enter"
                  Command="{Binding Path=DataContext.CodexVM.OpenSelectedCodicesCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        <MenuItem Header="Bulk Edit Selection..." CommandParameter="{Binding}" tools:AP.IconKind="Edit" InputGestureText="Ctrl + E"
                  Command="{Binding Path=DataContext.CodexVM.EditCodicesCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        <MenuItem Header="Favorite" CommandParameter="{Binding}" tools:AP.IconKind="Favorite" InputGestureText="Ctrl + F"
                  Command="{Binding Path=DataContext.CodexVM.FavoriteCodicesCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        <Separator Style="{StaticResource MarginlessSeparator}"/>
        <MenuItem Header="Renew MetaData" tools:AP.IconKind="FileRefreshOutline" CommandParameter="{Binding}"
                  Command="{Binding Path=DataContext.CodexVM.GetMetaDataBulkCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        <MenuItem Header="Renew Cover" tools:AP.IconKind="ImageRefreshOutline" CommandParameter="{Binding}"
                  Command="{Binding Path=DataContext.CodexVM.GetCoverBulkCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        <Separator Style="{StaticResource MarginlessSeparator}"/>
        <MenuItem Header="Move to Collection" tools:AP.IconKind="FileMoveOutline"
                 ItemsSource="{Binding DataContext.MVM.CollectionVM.CollectionDirectories, 
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
            <MenuItem.ItemContainerStyle>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="MenuItem.Command" Value="{Binding Path=DataContext.CodexVM.MoveToCollectionCommand, 
                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
                    <Setter Property="MenuItem.CommandParameter">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource MultiParamConverter}">
                                <Binding Path="Header" RelativeSource="{RelativeSource self}"/>
                                <Binding Path="SelectedItems" RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type Selector}}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </MenuItem.ItemContainerStyle>
        </MenuItem>
        <MenuItem Header="Remove" tools:AP.IconKind="Delete" CommandParameter="{Binding}" InputGestureText="Delete"
                  Command="{Binding Path=DataContext.CodexVM.DeleteCodicesCommand, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  ToolTip="Removes the items from COMPASS."/>
        <MenuItem Header="Remove Forever" tools:AP.IconKind="DeleteForever" CommandParameter="{Binding}" InputGestureText="Alt+Delete"
                  Command="{Binding Path=DataContext.CodexVM.BanishCodicesCommand, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  ToolTip="Removes the items from COMPASS and excludes them from future imports."/>
    </ContextMenu>
    <!--#endregion-->

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            Background="{StaticResource ButtonBackground}" BorderBrush="{StaticResource TabFocus}">
                        <ContentPresenter Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" MaxWidth="400">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}" x:Key="{x:Type TextBlock}">
                                    <Setter Property="TextWrapping" Value="Wrap"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region RadioButton-->
    
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource AccentColorMuted}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{TemplateBinding Foreground}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource AccentColorMuted}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource AccentColorMuted}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}" x:Key="WrappingRadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{TemplateBinding Foreground}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <TextBlock Grid.Column="1" Focusable="False" TextWrapping="Wrap"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" Text="{TemplateBinding Content}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource AccentColorMuted}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource AccentColorMuted}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="RadioButton" x:Key="BigRadioButton">
        <Border x:Name="Border" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
        Background="{StaticResource CardBackground}" Margin="20" CornerRadius="10" 
        BorderBrush="{StaticResource AccentColorMuted}">
            <ContentPresenter Content="{TemplateBinding Content}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Border" Property="BorderThickness" Value="4"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--#endregion-->
    
    <!--#region Combobox Style-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="25" />
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Transparent" BorderThickness="2,2,0,2" BorderBrush="{StaticResource UIElementBackground}" />
            <Border Grid.Column="1" Background="{StaticResource UIElementBackground}" CornerRadius="0,3,3,0">
                <Path x:Name="Arrow" Fill="{StaticResource CollectionIconFill}" HorizontalAlignment="Center"
                                     VerticalAlignment="Center" Data="M0,0 L6,8 L12,0 "/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1.2" ScaleX="1.2"/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="True" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}"
                            Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="5,5,30,5" VerticalAlignment="Center" HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5" Focusable="True" 
                            Background="{StaticResource TransparentBlack}" Foreground="{StaticResource TextColor}"
                            Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="#FF3F3F3F" BorderThickness="1" BorderBrush="{StaticResource UIElementBackground}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="multiSelectCombobox:MultiSelectCombobox" x:Key="Default">
        <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}"
                Focusable="false" IsChecked="{Binding Path=IsOpen,Mode=OneWayToSource,ElementName=popup}"
                ClickMode="Press">
            </ToggleButton>
            <!--Rich TextBox bound to document-->
            <TextBlock Name="placeholderText" Text="ex: Author the First, Author the second, ..." Grid.Row="6" Margin="10,0"
                       Foreground="{StaticResource TextMutedColor}" IsHitTestVisible="False" Focusable="False"
                       Visibility="{Binding ElementName=rtxt, Path=IsKeyboardFocused, Converter={StaticResource ToVisibilityConverter}, ConverterParameter=true}"/>
            <RichTextBox x:Name="rtxt" IsDocumentEnabled="False" AcceptsReturn="False" VerticalContentAlignment="Center"
                        FontSize="16" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,5,30,5" Focusable="True" 
                        Background="{StaticResource TransparentBlack}" Foreground="{StaticResource TextColor}"
                            BorderThickness="0"/>
            <!--Suggestion Drop-Down-->
            <Popup Name="popup" Placement="Bottom" PlacementTarget="{Binding ElementName=rtxt}"
                    StaysOpen="False" PopupAnimation="Slide" SnapsToDevicePixels="True"
                    Width="{Binding ActualWidth, ElementName=rtxt}">
                <Border BorderBrush="Black" BorderThickness="1">
                    <ListBox Name="lstSuggestion" Background="{StaticResource DarkUIElementBackground}"
                            SelectionMode="Multiple" HorizontalContentAlignment="Stretch" MaxHeight="300"
                             ItemsSource="{Binding SuggestionItemsSource}"/>
                </Border>
            </Popup>
        </Grid>
    </ControlTemplate>
    
    <!--SimpleStyles: ComboBoxItem-->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border" Padding="{TemplateBinding Padding}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource TitlebarElementHoverBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    

    <ControlTemplate TargetType="CheckBox" x:Key="BorderedCheckbox">
        <Grid>
            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent"
        Panel.ZIndex="1"/>
            <!-- Rect in front so only templated checkbox can be clicked, because templatebinding is not two way-->
            <Border x:Name="Border" CornerRadius="5" Panel.ZIndex="0">
                <CheckBox Content="{TemplateBinding Content}" IsChecked="{TemplateBinding IsChecked}" 
                  Margin="10" Focusable="False"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource AccentColorMuted}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonBackground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
    
    <!--#region DatePicker-->
    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,3,0,3" />
    </Style>

    <Style x:Key="DarkCalenderStyle" TargetType="{x:Type Calendar}">
        <Setter Property="CalendarItemStyle"
          Value="{StaticResource CalendarItemStyle}" />
        <Setter Property="Foreground" Value="{StaticResource TextColor}" />
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root"
                    HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Style="{TemplateBinding CalendarItemStyle}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="CalendarStyle" Value="{StaticResource DarkCalenderStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border Background="Gray" CornerRadius="5" Margin="5">
                        <Grid x:Name="PART_Root">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <DatePickerTextBox x:Name="PART_TextBox" MinWidth="100"
                                       BorderThickness="0" Foreground="White"
                                       HorizontalContentAlignment="Stretch"
                                       VerticalContentAlignment="Center"
                                       Grid.Column="0" Margin="5,0"/>
                            <Button x:Name="PART_Button" Grid.Column="1">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border HorizontalAlignment="Right" Margin="3">
                                                        <Border.Background>
                                                            <SolidColorBrush Color="Black" Opacity="0"/>
                                                        </Border.Background>
                                                        <materialDesign:PackIcon Width="20" Kind="Calendar"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <Popup x:Name="PART_Popup" StaysOpen="False"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FirstDayOfWeek" Value="Monday"/>
    </Style>

    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePickerTextBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unwatermarked" />
                                <VisualState Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="WatermarkContent">
                            <Border x:Name="watermark_decorator" BorderThickness="0">
                                <ContentControl x:Name="PART_Watermark" Foreground="White"
                                                    Opacity="0" Focusable="False"
                                                    IsHitTestVisible="False" Margin="0">
                                    <ContentControl.Template>
                                        <ControlTemplate>
                                            <TextBlock Text="DD/MM/YYYY" VerticalAlignment="Center"/>
                                        </ControlTemplate>
                                    </ContentControl.Template>
                                </ContentControl>
                            </Border>
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
 
    <!--#region Tags Stuff-->
    <DataTemplate x:Key="TagTemplate" DataType="{x:Type models:ITag}">
        <Border CornerRadius="5" Margin="2,3">
            <Border.Background>
                <SolidColorBrush Color="{Binding BackgroundColor}" Opacity=".8"/>
            </Border.Background>
            <TextBlock Text="{Binding Content}" Margin="7,2" Foreground="White" FontSize="14"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="TagDeletableTemplate" DataType="{x:Type models:ITag}">
        <Button Style="{x:Null}" Command="{Binding DataContext.RemoveFromItemsControlCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                CommandParameter="{Binding}" Cursor="Hand">
            <Button.Template>
                <ControlTemplate>
                    <Border CornerRadius="5" Margin="2,3">
                        <Border.Background>
                            <SolidColorBrush Color="{Binding BackgroundColor}"/>
                        </Border.Background>
                        <StackPanel Orientation="Horizontal" Margin="7,2">
                            <TextBlock x:Name="DeletableTagTextBlock" Text="{Binding Content}" Foreground="White" FontSize="14" Margin="2,0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Border}}" Value="True">
                                                <Setter Property="TextDecorations" Value="Strikethrough"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <materialDesign:PackIcon Kind="Trash" Width="14" Height="14" VerticalAlignment="Bottom" Margin="0,1"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </DataTemplate>

    <DataTemplate x:Key="FilterTagTemplate" DataType="{x:Type models:ITag}">
        <Button Style="{x:Null}" Command="{Binding DataContext.AddSourceFilterCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                CommandParameter="{Binding}" Cursor="Hand">
            <Button.Template>
                <ControlTemplate>
                    <Border CornerRadius="5" Margin="5">
                        <Border.Background>
                            <SolidColorBrush Color="{Binding BackgroundColor}"/>
                        </Border.Background>
                        <TextBlock x:Name="DeletableTagTextBlock" Text="{Binding Content}" Foreground="White" FontSize="14" Margin="7,2"/>
                    </Border>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </DataTemplate>

    <DataTemplate x:Key="TagInTreeTemplate" DataType="{x:Type models:TreeViewNode}">
        <Border CornerRadius="5" Margin="0,3">
            <Border.Background>
                <SolidColorBrush Color="{Binding Tag.BackgroundColor}"/>
            </Border.Background>
            <TextBlock Text="{Binding Tag.Content}" Margin="7,0" Foreground="White" FontSize="15"/>
        </Border>
    </DataTemplate>

    <HierarchicalDataTemplate x:Key="GroupTag" DataType="{x:Type models:TreeViewNode}" ItemsSource="{Binding Children}">
        <Border Margin="0,3" Background="{x:Null}">
            <StackPanel Orientation="Horizontal">
                <Rectangle Fill="{Binding Tag.BackgroundColor, Converter={StaticResource ColorToBrushConverter}}" 
                                       Width="2" Height="10" Margin="3" VerticalAlignment="Bottom"/>
                <TextBlock Text="{Binding Tag.Content}" Foreground="LightGray"
                                           FontSize="16" FontWeight="Bold" Typography.Capitals="AllSmallCaps"/>
            </StackPanel>
        </Border>
    </HierarchicalDataTemplate>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                          Width="15"
                          Height="13"
                          Background="Transparent">
                        <Path x:Name="ExpandPath"
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="1,1,1,1"
                            Fill="Gray"
                            Data="M 4 0 L 8 4 L 4 8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                Value="True">
                            <Setter Property="Data"
                                TargetName="ExpandPath"
                                Value="M 0 4 L 8 4 L 4 8 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="{x:Type TreeViewItem}" x:Key="WideTreeViewItem">
        <StackPanel>
            <Border Name="Bd"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="19" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ToggleButton x:Name="Expander"
                      Style="{StaticResource ExpandCollapseToggleStyle}"
                      IsChecked="{Binding Path=IsExpanded,
                                  RelativeSource={RelativeSource TemplatedParent}}"
                      ClickMode="Press"/>
                    <ContentPresenter x:Name="PART_Header"
                    Grid.Column="1"
                        ContentSource="Header"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                </Grid>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Margin="19,0,0,0" />
        </StackPanel>
    </ControlTemplate>
    <!--#endregion-->

    <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}" x:Key="ToolTipIcon">
        <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
    </Style>

    <!--#region Progressbar-->
    <Style x:Key="RoundedProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="6"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="6" RadiusY="6" />
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="6" RadiusY="6">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region TabControl-->
    <Style TargetType="TabItem">
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="MaxWidth" Value="300"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="TabBorder">
                        <StackPanel Orientation="Horizontal" Margin="5,2">
                            <materialDesign:PackIcon Height="25" Width="25" HorizontalAlignment="Right"
                                                Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tools:AP.IconKind)}"/>
                            <ContentPresenter 
                                                VerticalAlignment="Center"
                                                ContentSource="Header"
                                                Margin="5,0,10,0"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TabBorder" Property="Background" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="TabBorder" Property="Background" Value="{StaticResource UIElementBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region DataGrid styles-->
    <Style TargetType="{x:Type DataGridColumnHeader}" x:Key="BasicDataGridColumnHeaderStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <DockPanel Margin="0,8">
                        <DockPanel.Background>
                            <SolidColorBrush Color="Black" Opacity="0"/>
                        </DockPanel.Background>
                        <TextBlock Text="{TemplateBinding Content}" Margin="5,0" DockPanel.Dock="Left"
                                    Width="{TemplateBinding Width}" TextAlignment="Left" 
                                    FontSize="14" FontWeight="Bold" Foreground="#808080"/>
                        <Path x:Name="SortArrow" VerticalAlignment="Center" Width="8" Height="6" Margin="2,0,5,0" 
                            Stretch="Fill" Opacity="0.5" Fill="White" RenderTransformOrigin="0.5,0.4" DockPanel.Dock="Left"
                            Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right"
                            Width="2" BorderThickness="1" DockPanel.Dock="Right" Cursor="SizeWE"
                            BorderBrush="{Binding VerticalGridLinesBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource TransparentBlack}"/>
    </Style>
    <!--#endregion-->
</ResourceDictionary>